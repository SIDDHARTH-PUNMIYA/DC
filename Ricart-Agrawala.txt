package clgprogramspracs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;

public class Ricart_Agrawala {
public static void main(String[] args) {
	Scanner sc  =new Scanner(System.in);
	System.out.println("Enter the no of nodes");
	int n = sc.nextInt();
	
System.out.println("Enter the no of nodes want to enter the Critical Section");
Random rand= new Random();
int toenter =sc.nextInt();
Data d[] = new Data[toenter];

for(int i=0;i<toenter;i++) {
	d[i]= new Data(i, rand.nextInt(10) );
}

Arrays.sort(d,new Comparator<Data>() {

	@Override
	public int compare(Data o1, Data o2) {
		return o1.timestamp-o2.timestamp;
	}
}
);
Queue<int []> q = new LinkedList<>();

for (int i = 0; i < d.length; i++) {
	System.out.println(d[i].process+" "+d[i].timestamp);
	q.add(new int[] {d[i].process,d[i].timestamp});
}
System.out.println("All the nodes which want to go in CS Sends REQ to other nodes ");

while(!q.isEmpty()) {
	
	int process =q.peek()[0];
	int timestamp = q.poll()[1];
	
	
	System.out.println("Process "+process+" is allowed to enter CS as its timestamp "+timestamp+" is smaller than others");
	System.out.println("Process "+process + " enter CS...");
	System.out.println("Process "+process + " exit CS...");
	if(!q.isEmpty())
	System.out.println("Next process in queue "+q.peek()[0]+" can enter the CS");
	if(q.isEmpty())
		System.out.println("No process left to enter CS");
}

}
}
class Data{
	int process, timestamp;
	Data(int process,int timestamp) {
		this.process=process;
		this.timestamp=timestamp;
	}
	

}
